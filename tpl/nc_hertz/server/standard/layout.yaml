layouts:
  - path: wire.go
    delims:
      - ""
      - ""
    body: |-
      //go:build wireinject
      // +build wireinject
  
      // The build tag makes sure the stub is not built in the final build.
  
      package main
      import (
        "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        "github.com/google/wire"
        "{{.GoModule}}/internal/base/conf"
        "{{.GoModule}}/internal/base/data"
        httpServer "{{.GoModule}}/internal/base/server"
        "{{.GoModule}}/internal/repo"
        "{{.GoModule}}/internal/router"
        "{{.GoModule}}/internal/service"
      )
      // *polaris.Registry, *registry.Info
      func initApp(hlog.CtxLogger, *conf.Config) (*server.Hertz, func(), error) {
        panic(wire.Build(router.ProviderSet, service.ProviderSet, repo.ProviderSet, httpServer.ProviderSet, data.ProviderSet))
      }
  - path: polaris.yaml
    delims:
      - ""
      - ""
    body: |-
      global:
         serverConnector:
           addresses:
             - polaris.config.ncloud.com:8091
      config:
         configConnector:
           addresses:
             - polaris.config.ncloud.com:8093

  - path: script/build.sh
    delims:
      - ""
      - ""
    body: |-
      #!/usr/bin/env bash
      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o build/{{.Namespace}}Http

  - path: script/docker-build.sh
    delims:
      - ""
      - ""
    body: |-
      #!/usr/bin/env bash
       cd ../
       docker build -t uhub.service.ucloud.cn/{{.GoModule}}:"$1" .

  - path: script/docker-push.sh
    delims:
      - ""
      - ""
    body: |-
      #!/usr/bin/env bash
       docker push uhub.service.ucloud.cn/{{.GoModule}}:"$1"

  - path: Dockerfile
    delims:
      - ""
      - ""
    body: |-
      FROM golang:alpine AS builder
  
      LABEL stage=gobuilder
  
      ENV CGO_ENABLED 0
      ENV GOPROXY https://goproxy.cn,direct
      RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories
  
      RUN apk update --no-cache && apk add --no-cache tzdata
  
      WORKDIR /build
      
      Copy build/{{.GoNamespace}}Http  /build/{{.GoNamespace}}/{{.GoNamespace}}Http
      COPY polaris.yaml /build/{{.GoNamespace}}/polaris.yaml
  
      FROM scratch
  
      COPY --from=builder /usr/share/zoneinfo/Asia/Shanghai /usr/share/zoneinfo/Asia/Shanghai
      ENV TZ Asia/Shanghai
  
      WORKDIR /app
      COPY --from=builder /build/{{.GoNamespace}}/{{.GoNamespace}}Http /app/{{.GoNamespace}}Http
      COPY --from=builder /build/{{.GoNamespace}}/polaris.yaml /app/polaris.yaml
      CMD ["./{{.GoNamespace}}Http"]

  - path: main.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package main

      import (
        "context"
      
        "flag"
        "github.com/baoyxing/micro-extend/pkg/configuration/polaris"
        "github.com/baoyxing/micro-extend/pkg/utils/logutils"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        hertzzap "github.com/hertz-contrib/logger/zap"
        "gopkg.in/yaml.v3"
        "{{.GoModule}}/internal/base/conf"
        "time"
      )
      
      var (
        namespace = "edge"                    //空间名称
        fileGroup = "plugin"                  //分组名称
        fileName  = "bff/sdk-api/config.yaml" //文件名称
      )
      func main() {
        flag.Parse()
        hlog.SetLogger(hertzzap.NewLogger())
        hlog.SetLevel(hlog.LevelTrace)
        //解析远程配置文件
        config := new(conf.Config)
        if conf.GetEnv() == "dev" {
           // 解析本地配置
          config = conf.GetConf()
        } else {
          // 解析远程配置文件
          configFile := polaris.ConfigApi(namespace, fileGroup, fileName)
           err := yaml.Unmarshal([]byte(configFile.GetContent()), &config)
           if err != nil {
              ctx := context.Background()
               hlog.CtxFatalf(ctx, "配置文件 yaml反序列化失败 error：%v", err)
            }
        }
  
        // 自定义日志配置
        if config.Logger.Enable {
           opts := make([]logutils.Option, 0, 8)
           opts = append(opts, logutils.WithPath(config.Logger.Path))
           opts = append(opts, logutils.WithMaxSize(config.Logger.MaxSize))
           opts = append(opts, logutils.WithMaxBackups(config.Logger.MaxBackups))
           opts = append(opts, logutils.WithMaxAge(config.Logger.MaxAge))
          opts = append(opts, logutils.WithCompress(config.Logger.Compress))
          opts = append(opts, logutils.WithOutputMode(config.Logger.OutputMode))
          opts = append(opts, logutils.WithRotationDuration(time.Duration(config.Logger.RotationDuration)))
          opts = append(opts, logutils.WithSuffix(config.Logger.Suffix))
          logutils.NewHertzLog(opts...)
          hlog.SetLevel(logutils.Level(config.Logger.Level).HLogLevel())
        }
  
      //wire 依赖注入
      h, cleanup, err := initApp(hlog.DefaultLogger(), config)
      if err != nil {
        panic(err)
      }

      defer cleanup()
      h.Spin()
      }
  

  - path: biz/router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }

  - path:  internal/base/conf/config.go
    delims:
      - ""
      - ""
    body: |-
      package conf

      import (
        "context"
      	"github.com/baoyxing/micro-extend/pkg/config/client"
      	"github.com/baoyxing/micro-extend/pkg/config/hertz_conf"
      	"github.com/baoyxing/micro-extend/pkg/config/log"
        "github.com/bytedance/go-tagexpr/v2/validator"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        "gopkg.in/yaml.v3"
        "os"
        "path/filepath"
        "sync"
        )
      
        var (
        conf *Config
        once sync.Once
        )

      type Config struct {
      	Service       hertz_conf.Service `json:"service" yaml:"service"`        //服务名称配置
      	ClientConnect ClientConnect      `json:"client_connect" yaml:"client_connect"` //客户端服务发现配置
      	Server        hertz_conf.Server  `json:"server"  yaml:"server"`         //服务端配置
      	Logger        log.Logger         `json:"logger" yaml:"logger"`         //日志配置
      }
      type ClientConnect struct {
        Option         client.Client          `json:"option" yaml:"option"`
        GeoInfoService client.RPCServerOption `json:"Geo_info_service" yaml:"Geo_info_service"`
      }
      // GetConf gets configuration instance
      func GetConf() *Config {
      	once.Do(initConf)
      	return conf
      }

      func initConf() {
      	prefix := "conf"
      	confFileRelPath := filepath.Join(prefix, filepath.Join(GetEnv(), "conf.yaml"))
      	content, err := os.ReadFile(confFileRelPath)
      	if err != nil {
      		hlog.CtxFatalf(context.Background(), "read config file error - %v", err)
            panic(err)
      	}
      	conf = new(Config)
      	err = yaml.Unmarshal(content, conf)
      	if err != nil {
      		hlog.Error("parse yaml error - %v", err)
      		panic(err)
      	}
      	if err := validator.Validate(conf); err != nil {
      		hlog.Error("validate config error - %v", err)
      		panic(err)
      	}
      }

      func GetEnv() string {
      	e := os.Getenv("GO_ENV")
      	if len(e) == 0 {
      		return "test"
      	}
      	return e
      }
  - path: conf/dev/conf.yaml
    delims:
      - ""
      - ""
    body: |-
      service:
          space: edge
          name: edge-plugin-bff-edge-api-service
          version: v1.0.0
      client_connect:
          geo_info_service:
            name: geo-info-service
            Intranet: 192.168.2.30:4563
          option:
            timeout_control:
              rpc_time_out:
              enable: false
              time_out: 3s
            connect_time_out:
              enable: false
              time_out: 50ms
            connection_type:
              short_connection:
              enable: false
            long_connection:
              enable: false
              max_idle_per_address: 10
              min_idle_per_address: 2
              max_idle_global: 100
              max_idle_time_out: 60s
            client_transport:
              enable: false
              mux_connection: 2
            failure_retry:
              enable: false
              max_retry_times: 5
            load_balancer:
              enable: false
            cbsuite:
              enable: false
      server:
          http:
            enable: true
            address: '0.0.0.0:20004'
            exit_wait_time: 1
          polaris:
            enable: true
            network: tcp
            address: '192.168.0.4:8888'
          jaeger:
            enable: true
            endpoint: '192.168.0.4:4317'
          transport:
            enable: false
          cors:
            enable: true
          auth:
            enable: true
            ak: 
            sk: 
            tea_key: 
          gzip:
            enable: false
            default_compression: false
            best_compression: false
            best_speed: false
            no_compression: false
            excluded:
              enable: false
              excluded_extensions:
                enable: false
                extensions: ''
              excludedPaths:
                enable: false
                paths: ''
              excluded_path_regexes:
                enable: false
                regexes: ''
          i18n:
            enable: false
          swag:
            enable: false
      logger:
          enable: true
          path: ./log
          max_size: 10
          max_backups: 10
          max_age: 30
          compress: false
          output_mode: 2
          suffix: ".log"
          rotation_duration: 0
          level: debug
  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml
  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml
  - path: internal/base/data/data.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package data
      import (
        "context"
        geoRPCClient "github.com/baoyxing/geo-rpc/client"
        "github.com/baoyxing/geo-rpc/kitex_gen/geo/geoservice"
        "github.com/baoyxing/micro-extend/pkg/config/client"
        mPolaris "github.com/baoyxing/micro-extend/pkg/polaris"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        "github.com/kitex-contrib/polaris"
        "{{.GoModule}}/internal/base/conf"
        "time"
      )
      
      type Data struct {
        Log       hlog.CtxLogger
        Conf      *conf.Config
        GeoClient geoservice.Client
      }

      func NewData(log hlog.CtxLogger,
        conf *conf.Config) *Data {
        ctx := context.Background()
        discover := newDiscover(ctx, conf, log)
        return &Data{
        Log:       log,
        Conf:      conf,
        GeoClient: newGeoRpcClientWithPolaris(ctx, discover, conf, log),
        }
      }

      // NewDiscover 服务发现
      func newDiscover(ctx context.Context, c *conf.Config, log hlog.CtxLogger) *polaris.ClientSuite {
          return mPolaris.NewDiscover(ctx, c.Service.Space, log)
      }

      func newGeoRpcClientWithPolaris(ctx context.Context,
        suite *polaris.ClientSuite,
         conf *conf.Config,
        log hlog.CtxLogger) geoservice.Client {
          rpcClient, _ := geoRPCClient.NewRPCClientWithPolaris(ctx,
          conf.ClientConnect.Option,
          conf.Server.Polaris,
          conf.Server.Jaeger,
          conf.Service.Name,
          conf.ClientConnect.GeoInfoService.Name,
           suite,
        log)
          return rpcClient
       }

      func newGeoRpcClient(ctx context.Context,
           conf *conf.Config,
           log hlog.CtxLogger) geoservice.Client {
    
        rpcTimeOut := time.Duration(3)
        if len(conf.ClientConnect.Option.TimeoutControl.RpcTimeout.Timeout) > 1 && conf.ClientConnect.Option.TimeoutControl.RpcTimeout.Enable {
        duration, err := time.ParseDuration(conf.ClientConnect.Option.TimeoutControl.RpcTimeout.Timeout)
        if err == nil {
        rpcTimeOut = duration
        }
       }
      rpcClientConf := client.RpcClientConf{
       Addr:             conf.ClientConnect.GeoInfoService.Intranet,
       MuxConnectionNum: conf.ClientConnect.Option.ConnectionType.ClientTransport.MuxConnection,
       RpcTimeout:       rpcTimeOut,
        ProviderEndpoint: conf.Server.Jaeger.Endpoint,
        ServiceName:      conf.ClientConnect.GeoInfoService.Name,
      }
        rpcClient, _ := geoRPCClient.NewRPCClient(ctx,
        rpcClientConf, log)
        return rpcClient
        }

  - path: internal/base/data/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package data
  
      import (
        "github.com/google/wire"
      )
  
      var ProviderSet = wire.NewSet(
          NewData,
      )
  - path: internal/repo/provider.go
    delims:
      - ""
      - ""
    body: |-
      package repo
      
      import (
      "github.com/google/wire"
      )
      
      var ProviderSet = wire.NewSet(
        NewGeoRepo,
        )
      

  - path: internal/repo/geo_repo.go
    delims:
      - ""
      - ""
    body: |-
      package repo
      
      import (
      "context"
      "{{.GoModule}}/internal/base/data"
      "{{.GoModule}}/internal/schema"
      "{{.GoModule}}/internal/service"
      "github.com/bytedance/gopkg/cloud/metainfo"
      "github.com/baoyxing/go-tools/cache/v1"
      v1Cache "github.com/baoyxing/go-tools/pkg/cache/v1"
      )
      
      type geoRepo struct {
          *data.Data
         cache v1.Cache[string, string]
          
      }

      func NewGeoRepo(data *data.Data) service.GeoRepo {
         cache := v1Cache.NewLruCache[string, string](1000)
         return &geoRepo{data, cache}
      }

      func (repo *geoRepo) Register(ctx context.Context, ip string) error {
        ctx = metainfo.WithPersistentValue(ctx, "client_IP", ip)
        location, err := repo.GeoClient.GetLocation(ctx)
        if err != nil {
          return err
        }
        metainfo.WithValue(ctx, "country", location.Country)
        metainfo.WithValue(ctx, "region", location.Region)
        metainfo.WithValue(ctx, "city", location.City)
        metainfo.WithValue(ctx, "isp", location.Isp)
        return nil
      }
      
      func (repo *geoRepo) Get(ctx context.Context) schema.LocationObject {
        location := schema.LocationObject{
          Country: "unknown",
          Region:  "unknown",
          City:    "unknown",
          Isp:     "unknown",
        }
        country, ok := metainfo.GetValue(ctx, "country")
        if ok {
          location.Country = country
        }
        region, ok := metainfo.GetValue(ctx, "region")
        if ok {
        location.Region = region
        }
        city, ok := metainfo.GetValue(ctx, "city")
        if ok {
          location.City = city
        }
        isp, ok := metainfo.GetValue(ctx, "isp")
        if ok {
          location.Isp = isp
        } 
          return location
        }
  - path: internal/repo/geo_repo.go
    delims:
      - ""
      - ""
    body: |-
      package repo
       import (
      "github.com/google/wire"
      )
      
      var ProviderSet = wire.NewSet(
      NewGeoRepo,
      )
  - path: internal/entity/test.go
    delims:
      - ""
      - ""
    body: |-
      package entity

  - path: internal/schema/location_schema.go
    delims:
      - ""
      - ""
    body: |-
      package schema
      type LocationObject struct {
          Country string `json:"country"` //国家
          Region  string `json:"region"`  //中国的省份
          City    string `json:"city"`    //城市
          Isp     string `json:"isp"`     //运营商
      }

  - path: script/publish.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/usr/bin/env bash
      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/***Bff

  - path: script/update.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/usr/bin/env bash
      hz update -idl ../idl/***.thrift
  - path: internal/base/server/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package server
      
      import (
        "github.com/google/wire"
      )
      
      var ProviderSet = wire.NewSet(
        NewHTTPServer,
      )

  - path: internal/base/server/http.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package server
      
      import (
        "context"
        "github.com/baoyxing/micro-extend/middleware"
        "github.com/baoyxing/micro-extend/pkg/options/http"
        "github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
        httpServer "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        hgzip "github.com/hertz-contrib/gzip"
        hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
        "{{.GoModule}}/internal/base/conf"
        "{{.GoModule}}/internal/router"
      )
      
      func NewHTTPServer(r *router.Router, c *conf.Config, log hlog.CtxLogger) *httpServer.Hertz {
  
        //初始化链路
        tracer, config := http.NewServerTracer(c.Server, c.Service, log)
        // 创建实例
        hertz := httpServer.New(http.ServerOptions(c.Server, c.Service, log, tracer)...)
        hertz.Use(hertztracing.ServerMiddleware(config))
  
        //是否启用jaeger链路追踪
        if c.Server.Jaeger.Enable {
          hertz.Use(hertztracing.ServerMiddleware(config))
        }
  
        // 跨域
        if c.Server.Cors.Enable {
          hertz.Use(middleware.Cors())
        }
  
        // panic恢复的功能
        if c.Server.Recovery.Enable {
          hertz.Use(recovery.Recovery())
        }
  
        // gzip文件压缩
        if c.Server.Gzip.Enable {
          if c.Server.Gzip.BestCompression {
            hertz.Use(hgzip.Gzip(hgzip.BestCompression, http.GzipOptions(c.Server)...))
          }
          if c.Server.Gzip.BestSpeed {
            hertz.Use(hgzip.Gzip(hgzip.BestSpeed, http.GzipOptions(c.Server)...))
          }
          if c.Server.Gzip.DefaultCompression {
            hertz.Use(hgzip.Gzip(hgzip.DefaultCompression, http.GzipOptions(c.Server)...))
          }
          if c.Server.Gzip.NoCompression {
            hertz.Use(hgzip.Gzip(hgzip.NoCompression))
          }     
        }

        // 国际化配置
        //if c.Server.I18n.Enable {
          //	hertz.Use(hertzI18n.Localize(options.I18nOptions()...))
        //}
  
        //优雅退出
        if c.Server.Http.Enable {
          hertz.OnShutdown = append(hertz.OnShutdown, func(ctx context.Context) {
            hlog.CtxInfof(ctx, "exit timeout!")
            <-ctx.Done()
            })
        }

        //初始化路由
        r.InitRouter(hertz)
        return hertz
      }
      
  - path: internal/router/handler.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package router
  
      import (
        "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/hertz-contrib/logger/accesslog"
        "{{.GoModule}}/internal/router/hello"
      )
  
      func (r *Router) InitRouter(server *server.Hertz) {
        server.Use(accesslog.New(accesslog.
          WithFormat("[${time}] ${status} - ${latency} ${method} ${path} ${queryParams}")))
        hello.Register(server, r.HellService)
      }

  - path: internal/router/router.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package router
      
      import "{{.GoModule}}/internal/service"
  
      type Router struct {
          *service.Service
          *service.HellService
      }
      
      func NewRouter(hellService *service.HellService, service *service.Service) *Router {
          return &Router{service, hellService}
      }
  - path: internal/router/hello/router.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package hello
      
      import (
        "crypto/sha1"
        microMiddleware "github.com/baoyxing/micro-extend/middleware"
        "{{.GoModule}}/internal/service"
        "github.com/cloudwego/hertz/pkg/app/server"
      )
  
      func Register(server *server.Hertz, api *service.HellService) {
          helloGroup := server.Group("/hello")
          helloGroup.Use(microMiddleware.Auth(api, sha1.New))
          helloGroup.Use(microMiddleware.RegisterLocation(api))
      {}}

  - path: internal/router/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package router
      
      import (
        "github.com/google/wire"
      )
      
      var ProviderSet = wire.NewSet(
        NewRouter,
      )
  - path: internal/service/service.go
    delims:
      - '{{'
      - '}}'
    body: |-
      
      package service
      
       import (
        "context"
        "{{.GoModule}}/internal/base/conf"
        "github.com/cloudwego/hertz/pkg/app"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        )
  
        type Service struct {
        log  hlog.CtxLogger
        conf *conf.Config
        GeoRepo
        }
        func NewService(geoRepo GeoRepo, c *conf.Config, log hlog.CtxLogger) *Service {
        return &Service{
        log:     log,
        conf:    c,
        GeoRepo: geoRepo,
        }
        }

      func (s *Service) GetSk(c context.Context,
        ctx *app.RequestContext,
        ak string,
        timestamp int64) (context.Context, string, error) {
        return c, s.conf.Server.Auth.SK, nil
      }

      func (s *Service) RegisterClientIp(c context.Context,
      ctx *app.RequestContext) (context.Context, error) {
      err := s.GeoRepo.Register(c, ctx.ClientIP())
      return c, err
      }
  - path: internal/service/provider.go
    delims:
      - '{{'
      - '}}'
    body: |-
      package service
  
      import (
        "github.com/google/wire"
      )
  
       var ProviderSet = wire.NewSet(
          NewService,
          NewHellService,
      )
  - path: internal/service/geo_service.go
    delims:
      - '{{'
      - '}}'
    body: |-
      package service  
      
      import (
      "context"
      "{{.GoModule}}/internal/schema"
      )

      type GeoRepo interface {
      Register(ctx context.Context, ip string) error
      Get(ctx context.Context) schema.LocationObject
      }
  - path: internal/service/hello_service.go
    delims:
      - '{{'
      - '}}'
    body: |-
      package service 
      type HellService struct {
      *Service
      }
  
      func NewHellService(s *Service) *HellService {
        return &HellService{
        s,
        }
        }
  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}
      
      go 1.21.3
      
      require (
        github.com/apache/thrift v0.16.0
        github.com/baoyxing/geo-rpc v0.0.0-20231115130557-d9ed4fbb1841
        github.com/baoyxing/micro-extend v0.0.0-20231123114354-f95d5ae3aa82
        github.com/bytedance/go-tagexpr/v2 v2.9.11
        github.com/cloudwego/hertz v0.7.2
        github.com/google/wire v0.5.0
        github.com/hertz-contrib/gzip v0.0.1
        github.com/hertz-contrib/logger/accesslog v0.0.0-20230619034227-00fc458d8f95
        github.com/hertz-contrib/logger/zap v1.1.0
        github.com/hertz-contrib/obs-opentelemetry/tracing v0.3.1
        github.com/kitex-contrib/polaris v0.0.0-20220811095956-d405002eaeaf
        github.com/baoyxing/go-tools v0.0.0-20231116085324-3fe99025cdf7
        gopkg.in/yaml.v3 v3.0.1
      )
    
  
      
    

  
      
      
      
      
      
