layouts:
  - path: cmd/wire.go
    delims:
      - ""
      - ""
    body: |-
      //go:build wireinject
      // +build wireinject
  
      // The build tag makes sure the stub is not built in the final build.
  
      package main
      import (
        "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        "github.com/google/wire"
        "{{.GoModule}}/internal/base/conf"
        "{{.GoModule}}/internal/base/data"
        httpServer "{{.GoModule}}/internal/base/server"
        "{{.GoModule}}/internal/repo"
        "{{.GoModule}}/internal/router"
        "{{.GoModule}}/internal/service"
      )
      // *polaris.Registry, *registry.Info
      func initApp(hlog.CtxLogger, *conf.Config) (*server.Hertz, func(), error) {
        panic(wire.Build(router.ProviderSet, service.ProviderSet, repo.ProviderSet, httpServer.ProviderSet, data.ProviderSet))
      }

  - path: cmd/main.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package main

      import (
        "context"
      
        "flag"
        "github.com/baoyxing/micro-extend/pkg/configuration/polaris"
        "github.com/baoyxing/micro-extend/pkg/utils/logutils"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        hertzzap "github.com/hertz-contrib/logger/zap"
        "go.uber.org/zap/zapcore"
        "gopkg.in/yaml.v3"
        "{{.GoModule}}/internal/base/conf"
      )
      
      var (
        namespace = "edge"                    //空间名称
        fileGroup = "plugin"                  //分组名称
        fileName  = "bff/sdk-api/config.yaml" //文件名称
      )
      func main() {
        flag.Parse()
        hlog.SetLogger(hertzzap.NewLogger())
        hlog.SetLevel(hlog.LevelTrace)
        configFile := polaris.ConfigApi(namespace, fileGroup, fileName)
        //解析远程配置文件
        config := new(conf.Config)
        err := yaml.Unmarshal([]byte(configFile.GetContent()), &config)
        if err != nil {
            hlog.CtxErrorf(context.Background(), "json 反序列化失败 error：%v", err)
            panic(err)
        }
  
        // 自定义日志配置
        if config.Logger.Enable {
          opts := make([]logutils.Option, 0)
          opts = append(opts, logutils.WithLumberjackFilename(config.Logger.Filename))
          opts = append(opts, logutils.WithLumberjackMaxSize(config.Logger.MaxSize))
          opts = append(opts, logutils.WithLumberjackMaxBackups(config.Logger.MaxBackups))
          opts = append(opts, logutils.WithLumberjackMaxAge(config.Logger.MaxAge))
          opts = append(opts, logutils.WithLumberjackCompress(config.Logger.Compress))
          opts = append(opts, logutils.WithLumberjackLocalTime(config.Logger.LocalTime))
          logger := logutils.NewLogger(opts...)
          write := zapcore.AddSync(logger)
          hlog.SetOutput(write)
          hlog.SetLevel(logutils.Level(config.Logger.Level).HertzLogLevel())
      }
  
      //wire 依赖注入
      h, cleanup, err := initApp(hlog.DefaultLogger(), config)
      if err != nil {
        panic(err)
      }

      defer cleanup()
      h.Spin()
      }

  - path: biz/router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }

  - path:  internal/base/conf/config.go
    delims:
      - ""
      - ""
    body: |-
      package conf

      import (
      	"github.com/baoyxing/micro-extend/pkg/config/client"
      	"github.com/baoyxing/micro-extend/pkg/config/hertz_conf"
      	"github.com/baoyxing/micro-extend/pkg/config/log"
      )

      type Config struct {
      	Service       hertz_conf.Service `json:"service" mapstructure:"service" yaml:"service"`        //服务名称配置
      	ClientConnect ClientConnect      `json:"server" mapstructure:"server" yaml:"server"` //客户端服务发现配置
      	Server        hertz_conf.Server  `json:"server" mapstructure:"server" yaml:"server"`         //服务端配置
      	Logger        log.Logger         `json:"logger" mapstructure:"logger" yaml:"logger"`         //日志配置
      }

      type ClientConnect struct {
      	Option          client.Client `json:"option" mapstructure:"option" yaml:"option"`
      	EdgeInfoService string        `json:"edge_info_service" mapstructure:"edge_info_service" yaml:"edge_info_service"`
      }
  - path: internal/base/conf/config.yaml
    delims:
      - ""
      - ""
    body: |-
      service:
          space: edge
          name: edge-plugin-bff-edge-api-service
          version: v1.0.0
      client_connect:
          edge_info_service:  edge-plugin-rpc-edge-info-service
          connect_option:
            timeout_control:
              rpc_time_out:
              enable: false
              time_out: 3s
            connect_time_out:
              enable: false
              time_out: 50ms
            connection_type:
              short_connection:
              enable: false
            long_connection:
              enable: false
              max_idle_per_address: 10
              min_idle_per_address: 2
              max_idle_global: 100
              max_idle_time_out: 60s
            transport:
              enable: false
              mux_connection: 2
            failure_retry:
              enable: false
              max_retry_times: 5
            load_balancer:
              enable: false
            cbsuite:
              enable: false
      server:
          http:
            enable: true
            address: '0.0.0.0:20004'
            exit_wait_time: 1
          polaris:
            enable: true
            network: tcp
            address: '192.168.0.4:8888'
          jaeger:
            enable: true
            endpoint: '192.168.0.4:4317'
          transport:
            enable: false
          cors:
            enable: true
          auth:
            enable: true
            ak: ***
            sk: ****
            tea_key: ****
          gzip:
            enable: false
            default_compression: false
            best_compression: false
            best_speed: false
            no_compression: false
            excluded:
              enable: false
              excluded_extensions:
                enable: false
                extensions: ''
              excludedPaths:
                enable: false
                paths: ''
              excluded_path_regexes:
                enable: false
                regexes: ''
          i18n:
            enable: false
          swag:
            enable: false
      logger:
          enable: true
          filename: ./log/edge-api-service.log
          max_size: 1
          max_backups: 10
          max_age: 30
          compress: false
          local_time: true

  - path: docker-compose.yaml
    delims:
      - ""
      - ""
    body: |-
      version: '3'
      services:
        mysql:
          image: 'mysql:latest'
          ports:
            - 3306:3306
          environment:
            - MYSQL_DATABASE=gorm
            - MYSQL_USER=gorm
            - MYSQL_PASSWORD=gorm
            - MYSQL_RANDOM_ROOT_PASSWORD="yes"
        redis:
          image: 'redis:latest'
          ports:
            - 6379:6379

  - path: readme.md
    delims:
      - ""
      - ""
    body: |-
      # *** Project

      ## introduce

      - Use the [Hertz](https://github.com/cloudwego/hertz/) framework
      - Integration of pprof, cors, recovery, access_log, gzip and other extensions of Hertz.
      - Generating the base code for unit tests.
      - Provides basic profile functions.
      - Provides the most basic MVC code hierarchy.

      ## Directory structure

      |  catalog   | introduce  |
      |  ----  | ----  |
      | conf  | Configuration files |
      | main.go  | Startup file |
      | hertz_gen  | Hertz generated model |
      | biz/handler  | Used for request processing, validation and return of response. |
      | biz/service  | The actual business logic. |
      | biz/dal  | Logic for operating the storage layer |
      | biz/route  | Routing and middleware registration |
      | biz/utils  | Wrapped some common methods |

      ## How to run

      ```shell
      sh build.sh
      sh output/bootstrap.sh
      ```
  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml


  - path: .hz
    delims:
      - "{{"
      - "}}"
    body: |-
      // Code generated by hz. DO NOT EDIT.

      hz version: {{.hzVersion}},
      handlerDir: ""
      modelDir: internal/schema
      routerDir: ""

  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml
  
  

  - path: script/bootstrap.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      CURDIR=$(cd $(dirname $0); pwd)
      BinaryName={{.ServiceName}}
      echo "$CURDIR/bin/${BinaryName}"
      exec $CURDIR/bin/${BinaryName}
      

  - path: internal/base/data/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package data
  
      import (
        "github.com/google/wire"
      )
  
      var ProviderSet = wire.NewSet(
          NewData,
      )
  - path: internal/entity/test.go
    delims:
      - ""
      - ""
    body: |-
      package entity

  - path: internal/schema/test.go
    delims:
      - ""
      - ""
    body: |-
      package schema

  - path: internal/repo/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package repo
  
      import (
        "github.com/google/wire"
      )
  
      var ProviderSet = wire.NewSet()

  - path: script/publish.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/usr/bin/env bash
      cd ../cmd/
      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ../build/***Bff

  - path: script/update.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/usr/bin/env bash
      hz update -idl ../idl/***.thrift

  - path: internal/base/data/data.go
    delims:
      - ""
      - ""
    body: |-
      package data
    
      import (
        "context"
        mPolaris "github.com/baoyxing/micro-extend/pkg/polaris"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        "github.com/kitex-contrib/polaris"
        "{{.GoModule}}/internal/base/conf"
      )
      
      type Data struct {
        log  hlog.CtxLogger
        conf *conf.Config
      }
      
      func NewData(log hlog.CtxLogger,
        conf *conf.Config) *Data {
        discover := newDiscover(conf, log)
        return &Data{
          log:        log,
          conf:       conf,
          }
        }
      
      // NewDiscover 服务发现
      func newDiscover(ctx context.Context,c *conf.Config, log hlog.CtxLogger) *polaris.ClientSuite {
        return mPolaris.NewDiscover(ctx, c.Service.Space, log)
      }

  - path: internal/service/service.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package service
  
      import (
        "{{.GoModule}}/internal/base/conf"
       "github.com/cloudwego/hertz/pkg/common/hlog"
      )

      type Service struct {
        log  hlog.CtxLogger
        conf *conf.Config
      }

      func NewService(c *conf.Config,log hlog.CtxLogger) *Service {
        return &Service{
          log:log,
          conf:c,
        }
      }

  - path: internal/service/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package service
  
      import (
        "github.com/google/wire"
      )
  
      var ProviderSet = wire.NewSet(
        NewService,
      )

  - path: internal/base/server/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package server
      
      import (
        "github.com/google/wire"
      )
      
      var ProviderSet = wire.NewSet(
        NewHTTPServer,
      )

  - path: internal/base/server/http.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package server
      
      import (
        "context"
        "github.com/baoyxing/micro-extend/middleware"
        "github.com/baoyxing/micro-extend/pkg/options/http"
        "github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
        httpServer "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/cloudwego/hertz/pkg/common/hlog"
        hgzip "github.com/hertz-contrib/gzip"
        hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
        "{{.GoModule}}/internal/base/conf"
        "{{.GoModule}}/internal/router"
      )
      
      func NewHTTPServer(r *router.Router, c *conf.Config, log hlog.CtxLogger) *httpServer.Hertz {
  
        //初始化链路
        tracer, config := http.NewServerTracer(c.Server, c.Service, log)
        // 创建实例
        hertz := httpServer.New(http.ServerOptions(c.Server, c.Service, log, tracer)...)
        hertz.Use(hertztracing.ServerMiddleware(config))
  
        //是否启用jaeger链路追踪
        if c.Server.Jaeger.Enable {
          hertz.Use(hertztracing.ServerMiddleware(config))
        }
  
        // 跨域
        if c.Server.Cors.Enable {
          hertz.Use(middleware.Cors())
        }
  
        // panic恢复的功能
        if c.Server.Recovery.Enable {
          hertz.Use(recovery.Recovery())
        }
  
        // gzip文件压缩
        if c.Server.Gzip.Enable {
          if c.Server.Gzip.BestCompression {
            hertz.Use(hgzip.Gzip(hgzip.BestCompression, http.GzipOptions(c.Server)...))
          }
          if c.Server.Gzip.BestSpeed {
            hertz.Use(hgzip.Gzip(hgzip.BestSpeed, http.GzipOptions(c.Server)...))
          }
          if c.Server.Gzip.DefaultCompression {
            hertz.Use(hgzip.Gzip(hgzip.DefaultCompression, http.GzipOptions(c.Server)...))
          }
          if c.Server.Gzip.NoCompression {
            hertz.Use(hgzip.Gzip(hgzip.NoCompression))
          }     
        }

        // 国际化配置
        //if c.Server.I18n.Enable {
          //	hertz.Use(hertzI18n.Localize(options.I18nOptions()...))
        //}
  
        //优雅退出
        if c.Server.Http.Enable {
          hertz.OnShutdown = append(hertz.OnShutdown, func(ctx context.Context) {
            hlog.CtxInfof(ctx, "exit timeout!")
            <-ctx.Done()
            })
        }

        //初始化路由
        r.InitRouter(hertz)
        return hertz
      }
      
  - path: internal/router/handler.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package router
  
      import (
        "github.com/cloudwego/hertz/pkg/app/server"
        "github.com/hertz-contrib/logger/accesslog"
      )
  
      func (r *Router) InitRouter(server *server.Hertz) {
        server.Use(accesslog.New(accesslog.
          WithFormat("[${time}] ${status} - ${latency} ${method} ${path} ${queryParams}")))
      }

  - path: internal/router/router.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package router
      
      import "{{.GoModule}}/internal/service"
  
      type Router struct {
          *service.Service
      }
  
      func NewRouter(service *service.Service) *Router {
        return &Router{service}
      }

  - path: internal/router/provider.go
    delims:
      - "{{"
      - "}}"
    body: |-
      
      package router
      
      import (
        "github.com/google/wire"
      )
      
      var ProviderSet = wire.NewSet(
        NewRouter,
      )
  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}
      
      go 1.20
      
      require (
        github.com/apache/thrift v0.13.0
        github.com/baoyxing/micro-extend v0.0.0-20230523114929-7523f7a1dddb
        github.com/cloudwego/hertz v0.6.3
        github.com/google/wire v0.5.0
        github.com/hertz-contrib/gzip v0.0.1
        github.com/hertz-contrib/logger/accesslog v0.0.0-20230619034227-00fc458d8f95
        github.com/hertz-contrib/logger/zap v1.0.0
        github.com/hertz-contrib/obs-opentelemetry/tracing v0.2.1
        github.com/kitex-contrib/polaris v0.0.0-20220811095956-d405002eaeaf
        go.opentelemetry.io/otel/trace v1.15.1
        go.uber.org/zap v1.24.0
        gopkg.in/yaml.v3 v3.0.1
      )
    
  
      
    

  
      
      
      
      
      
