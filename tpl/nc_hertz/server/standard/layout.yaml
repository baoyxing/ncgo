layouts:
  - path: cmd/main.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package main

      import (
        "context"

        "github.com/cloudwego/hertz/pkg/app"
      	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
      	"github.com/cloudwego/hertz/pkg/app/server"
      	"github.com/cloudwego/hertz/pkg/common/hlog"
        "github.com/cloudwego/hertz/pkg/common/utils"
        "github.com/cloudwego/hertz/pkg/protocol/consts"
        "github.com/hertz-contrib/cors"
      	"github.com/hertz-contrib/gzip"
        "github.com/hertz-contrib/logger/accesslog"
      	hertzlogrus "github.com/hertz-contrib/logger/logrus"
      	"github.com/hertz-contrib/pprof"
      	"{{.GoModule}}/biz/router"
      	"{{.GoModule}}/conf"
      	"gopkg.in/natefinch/lumberjack.v2"
      )

      func main() {
        // init dal
        // dal.Init()
      	address := conf.GetConf().Hertz.Address
      	h := server.New(server.WithHostPorts(address))

        registerMiddleware(h)

        // add a ping route to test
        h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
        	ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
        })

      	router.GeneratedRegister(h)

      	h.Spin()
      }

      func registerMiddleware(h *server.Hertz) {
      	// log
      	logger := hertzlogrus.NewLogger()
      	hlog.SetLogger(logger)
      	hlog.SetLevel(conf.LogLevel())
      	hlog.SetOutput(&lumberjack.Logger{
      		Filename:   conf.GetConf().Hertz.LogFileName,
      		MaxSize:    conf.GetConf().Hertz.LogMaxSize,
      		MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
      		MaxAge:     conf.GetConf().Hertz.LogMaxAge,
      	})

      	// pprof
      	if conf.GetConf().Hertz.EnablePprof {
      		pprof.Register(h)
      	}
      	// gzip
      	if conf.GetConf().Hertz.EnableGzip {
      		h.Use(gzip.Gzip(gzip.DefaultCompression))
      	}

        // access log
        if conf.GetConf().Hertz.EnableAccessLog {
          h.Use(accesslog.New())
        }

        // recovery
        h.Use(recovery.Recovery())

         // cores
         h.Use(cors.Default())
      }

  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}
      {{- if .UseApacheThrift}}
      replace github.com/apache/thrift => github.com/apache/thrift v0.13.0
      {{- end}}

  - path: biz/router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }

  - path:  internal/base/conf/config.go
    delims:
      - ""
      - ""
    body: |-
      package conf

      import (
      	"github.com/baoyxing/micro-extend/pkg/config/client"
      	"github.com/baoyxing/micro-extend/pkg/config/hertz_conf"
      	"github.com/baoyxing/micro-extend/pkg/config/log"
      )

      type Config struct {
      	Service       hertz_conf.Service `json:"service" mapstructure:"service" yaml:"service"`        //服务名称配置
      	ClientConnect ClientConnect      `json:"server" mapstructure:"server" yaml:"server"` //客户端服务发现配置
      	Server        hertz_conf.Server  `json:"server" mapstructure:"server" yaml:"server"`         //服务端配置
      	Logger        log.Logger         `json:"logger" mapstructure:"logger" yaml:"logger"`         //日志配置
      }

      type ClientConnect struct {
      	Option          client.Client `json:"option" mapstructure:"option" yaml:"option"`
      	EdgeInfoService string        `json:"edge_info_service" mapstructure:"edge_info_service" yaml:"edge_info_service"`
      }
  - path: internal/base/conf/config.yaml
    delims:
      - ""
      - ""
    body: |-
      service:
          space: edge
          name: edge-plugin-bff-edge-api-service
          version: v1.0.0
        client_connect:
          edge_info_service:  edge-plugin-rpc-edge-info-service
          connect_option:
            timeout_control:
              rpc_time_out:
              enable: false
              time_out: 3s
            connect_time_out:
              enable: false
              time_out: 50ms
            connection_type:
              short_connection:
              enable: false
            long_connection:
              enable: false
              max_idle_per_address: 10
              min_idle_per_address: 2
              max_idle_global: 100
              max_idle_time_out: 60s
            transport:
              enable: false
              mux_connection: 2
            failure_retry:
              enable: false
              max_retry_times: 5
            load_balancer:
              enable: false
            cbsuite:
              enable: false
        server:
          http:
            enable: true
            address: '0.0.0.0:20004'
            exit_wait_time: 1
          polaris:
            enable: true
            network: tcp
            address: '192.168.0.4:8888'
          jaeger:
            enable: true
            endpoint: '192.168.0.4:4317'
          transport:
            enable: false
          cors:
            enable: true
          auth:
            enable: true
            ak: ***
            sk: ****
            tea_key: ****
          gzip:
            enable: false
            default_compression: false
            best_compression: false
            best_speed: false
            no_compression: false
            excluded:
              enable: false
              excluded_extensions:
                enable: false
                extensions: ''
              excludedPaths:
                enable: false
                paths: ''
              excluded_path_regexes:
                enable: false
                regexes: ''
          i18n:
            enable: false
          swag:
            enable: false
        logger:
          enable: true
          filename: ./log/edge-api-service.log
          max_size: 1
          max_backups: 10
          max_age: 30
          compress: false
          local_time: true

  - path: docker-compose.yaml
    delims:
      - ""
      - ""
    body: |-
      version: '3'
      services:
        mysql:
          image: 'mysql:latest'
          ports:
            - 3306:3306
          environment:
            - MYSQL_DATABASE=gorm
            - MYSQL_USER=gorm
            - MYSQL_PASSWORD=gorm
            - MYSQL_RANDOM_ROOT_PASSWORD="yes"
        redis:
          image: 'redis:latest'
          ports:
            - 6379:6379

  - path: readme.md
    delims:
      - ""
      - ""
    body: |-
      # *** Project

      ## introduce

      - Use the [Hertz](https://github.com/cloudwego/hertz/) framework
      - Integration of pprof, cors, recovery, access_log, gzip and other extensions of Hertz.
      - Generating the base code for unit tests.
      - Provides basic profile functions.
      - Provides the most basic MVC code hierarchy.

      ## Directory structure

      |  catalog   | introduce  |
      |  ----  | ----  |
      | conf  | Configuration files |
      | main.go  | Startup file |
      | hertz_gen  | Hertz generated model |
      | biz/handler  | Used for request processing, validation and return of response. |
      | biz/service  | The actual business logic. |
      | biz/dal  | Logic for operating the storage layer |
      | biz/route  | Routing and middleware registration |
      | biz/utils  | Wrapped some common methods |

      ## How to run

      ```shell
      sh build.sh
      sh output/bootstrap.sh
      ```
  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml


  - path: script/.hz
    delims:
      - "{{"
      - "}}"
    body: |-
      // Code generated by hz. DO NOT EDIT.

      hz version: {{.hzVersion}},
      handlerDir: ""
      modelDir: internal/schema
      routerDir: ""

  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml
  
  

  - path: script/bootstrap.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      CURDIR=$(cd $(dirname $0); pwd)
      BinaryName={{.ServiceName}}
      echo "$CURDIR/bin/${BinaryName}"
      exec $CURDIR/bin/${BinaryName}

  - path: script/publish.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/usr/bin/env bash
      cd ../cmd/
      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ../build/***Bff

  - path: script/update.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/usr/bin/env bash
      hz update -idl ../idl/***.thrift