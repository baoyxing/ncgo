path: internal/base/conf/config.go
update_behavior:
  type: skip
body: |-
  package conf
  
  import (
      "gitee.com/byx_darwin/micro-extend/pkg/config"
      "gitee.com/byx_darwin/micro-extend/pkg/config/kitex_conf"
      "gitee.com/byx_darwin/uptrace-opentelemetry/log"
      "gitee.com/byx_darwin/micro-extend/pkg/config/elastic/olivere"
      "gitee.com/byx_darwin/micro-extend/pkg/config/kafka/sarama"
      "gopkg.in/yaml.v3"
      "os"
      "path/filepath"
      "sync"
      "github.com/bytedance/go-tagexpr/v2/validator"
      "github.com/cloudwego/kitex/pkg/klog"
  
  )
  
  var (
  conf *Config
  once sync.Once
  )
  
  type Config struct {
    Service             kitex_conf.Service   `json:"service" yaml:"service"`                                        
    Server              kitex_conf.Server    `json:"server" yaml:"server"` 
    Logger              log.Config           `json:"logger" yaml:"logger"`
    DBOption            config.DBOption      `json:"db_option" yaml:"db_option"`
    ElasticClientOption olivere.ClientOption `json:"elastic_client_option" yaml:"elastic_client_option"`
    ElasticOption       ElasticOption        `json:"elastic_option" yaml:"elastic_option"`
    RedisOption config.RedisOption `json:"redis_option" yaml:"redis_option"`
    RedisIndex  RedisIndex         `json:"redis_index" yaml:"redis_index"`
    KafkaOption  sarama.KafkaOption `json:"kafka_option" yaml:"kafka_option"`   // kafka配置
  }
  
  type ElasticOption struct {
  	MaxScrollSize int `json:"max_scroll_size" yaml:"max_scroll_size"`
  	KeepAlive     int `json:"keep_alive" yaml:"keep_alive"`
  }
  
  type RedisIndex struct {
  	NodeIndex Index `json:"node_index" yaml:"node_index"`
  }

  type Index struct {
  	Name   string `json:"name" yaml:"name"`
  	Expire int64  `json:"expire" yaml:"expire"`
  } 
  
  // GetConf gets configuration instance
  func GetConf() *Config {
  	once.Do(initConf)
  	return conf
  }

  func initConf() {
  	prefix := "conf"
  	confFileRelPath := filepath.Join(prefix, filepath.Join(GetEnv(), "conf.yaml"))
  	content, err := os.ReadFile(confFileRelPath)
  	if err != nil {
  		panic(err)
  	}
  	conf = new(Config)
  	err = yaml.Unmarshal(content, conf)
  	if err != nil {
  		klog.Error("parse yaml error - %v", err)
  		panic(err)
  	}
  	if err := validator.Validate(conf); err != nil {
  		klog.Error("validate config error - %v", err)
  		panic(err)
  	}
  }

  func GetEnv() string {
  	e := os.Getenv("GO_ENV")
  	if len(e) == 0 {
  		return "dev"
  	}
  	return e
  }