path: internal/base/data/data.go
update_behavior:
  type: skip
body: |-
  package data
  
  import (
     "context"
     "{{.Module}}/internal/base/conf"
     "github.com/cloudwego/kitex/pkg/klog"
     "github.com/redis/go-redis/v9"
     "github.com/olivere/elastic/v7"
     "gitee.com/byx_darwin/micro-extend/pkg/kafka/sarama"
     "github.com/uptrace/opentelemetry-go-extra/otelsql"
     "github.com/redis/go-redis/extra/redisotel/v9"
  "time"
  )
    
     
  )
  
  type Data struct {
    Log  klog.CtxLogger
    Conf *conf.Config
    *sarama.KafkaProducer
    RedisClient *redis.Client
    ESClient       *elastic.Client
  }
  
  func NewData(c *conf.Config,log klog.CtxLogger)(*Data, func(), error) { 
      ctx := context.Background()
      d := &Data{
        Log:log,
        Conf:c,
        KafkaProducer: newKafkaProducer(ctx,c,log),
        RedisClient: newRedisClient(ctx,c,log),
        ESClient:       newESClient(ctx, c, log),
      }
    return d, func() {
        err := d.KafkaProducer.SyncProducer.Close()
        if err != nil {
  	        log.CtxErrorf(ctx, "kafka close failed, err:%v", err)
        }
      }, nil
  }
  
  func newKafkaProducer(ctx context.Context,conf *conf.Config,log klog.CtxLogger) *sarama.KafkaProducer {
      producer, err := sarama.NewKafkaProducer(conf.KafkaOption)
      if err != nil {
        log.CtxFatalf(ctx, "%v", err)
      }
      return producer
  }
  
  func newRedisClient(ctx context.Context,conf *conf.Config, log klog.CtxLogger) *redis.Client {
    client := redis.NewClient(&redis.Options{
      Addr:         conf.RedisOption.Adders[0],
      DialTimeout:  time.Duration(conf.RedisOption.DialTimeout) * time.Second,  // 设置连接超时
      ReadTimeout:  time.Duration(conf.RedisOption.ReadTimeout) * time.Second,  // 设置读取超时
      WriteTimeout: time.Duration(conf.RedisOption.WriteTimeout) * time.Second, // 设置写入超时
      MaxRetries:   int(conf.RedisOption.MaxRetries),
      Password:     conf.RedisOption.Password,
      DB:           int(conf.RedisOption.DB),
    })
  if conf.Server.Jaeger.Enable {
  // 开启 tracing instrumentation.
  if err := redisotel.InstrumentTracing(client); err != nil {
  	panic(err)
  }
  // 开启 metrics instrumentation.
  if err := redisotel.InstrumentMetrics(client); err != nil {
  	panic(err)
  }
  }
    _, err := client.Ping(ctx).Result()
    if err != nil {
        log.CtxFatalf(ctx, "redis connect ping failed, err:%s", err.Error())
      }
    return client
  }
  
  func newESClient(ctx context.Context,conf *conf.Config,
    log klog.CtxLogger) *elastic.Client {
      client, err := elastic.NewClient(
      elastic.SetURL(conf.ElasticClientOption.URL...),
      elastic.SetSniff(false))
      if err != nil {
        log.CtxFatalf(ctx, "elastic Dial failure,err:%v", err)
      }
      return client
  }



  
   
